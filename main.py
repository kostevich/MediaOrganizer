#!/usr/bin/python

#==========================================================================================#
# >>>>> ПОДКЛЮЧЕНИЕ БИБЛИОТЕК И МОДУЛЕЙ <<<<< #
#==========================================================================================#

from dublib.Methods import CheckPythonMinimalVersion, ReadJSON
# from PyQt6.QtWidgets import QApplication, QVBoxLayout, QWidget


import os 
# import sys

#==========================================================================================#
# >>>>> ИНИЦИАЛИЗАЦИЯ СКРИПТА <<<<< #
#==========================================================================================#

# Проверка поддержки используемой версии Python.
CheckPythonMinimalVersion(3, 11)

#==========================================================================================#
# >>>>> СОЗДАНИЕ ПРИЛОЖЕНИЯ<<<<< #
#==========================================================================================#

# # Создадим приложение наследующее функции класса QWidget.
# class Window(QWidget):
#     # Конструктор приложения.
#     def __init__(self):
#         super().__init__()

#         # Размер окна приложения.
#         self.resize(900, 650)

#         # Название приложения.
#         self.setWindowTitle("MediaOrganizer")

#         # Фон приложения.
#         layout = QVBoxLayout()
#         self.setLayout(layout)
       
#==========================================================================================#
# >>>>> ИНИЦИАЛИЗАЦИЯ ПРИЛОЖЕНИЯ <<<<< #
#==========================================================================================#
        
# # Создаем экземпляр класса.
# app = QApplication(sys.argv)

# # Создаем виджет.
# window = Window()
# # Открытие окна приложения.
# window.show()

# # Выход из приложения.
# sys.exit(app.exec())

#==========================================================================================#
# >>>>> ЧТЕНИЕ НАСТРОЕК <<<<< #
#==========================================================================================#

Settings = ReadJSON("Settings.json")

#==========================================================================================#
# >>>>> ПЕРЕМЕЩЕНИЕ СОДЕРЖИМОГО ПАПКИ <<<<< #
#==========================================================================================#

def MovingMediaFiles():
    # Содержимое выбранной папки.
    Content = os.listdir(Settings["PATH"])

    for UnitContent in Content:
        # Выбор элементов папки заканчивающихся на jpg/mp4.
        if UnitContent.endswith('jpg') or UnitContent.endswith('mp4'):
            # Создание данных файла.
            FileData = ParseFile(UnitContent)
            try:
                # Если папки с названиемм файла не найдено, то создать ее.
                if os.path.exists(Settings["PATH"] + FileData["date"]) == False:
                    os.makedirs(Settings["PATH"] + FileData["date"])

                # Перемещение файла в папку. 
                os.replace(Settings["PATH"] + UnitContent, Settings["PATH"] + FileData["date"] + "/" + UnitContent)
            except:
                pass
#==========================================================================================#
# >>>>> ХРАНЕНИЕ ДАННЫХ ФАЙЛОВ <<<<< #
#==========================================================================================#             

# Хранение данных о файле.
def ParseFile(Filename: str)->dict:
    # Словарь с данными файла.
    Result = {
        'filename': None,
        "extension": Filename.split(".")[-1],
        "date": None,
        "time": None
    }

    # Получение данных для словаря.
    try:
        Result['filename'] = Filename.replace("." + Result['extension'], "")
        Result['date'] =  Result['filename'].split("_")[1]
        Result['time'] =  Result['filename'].split("_")[2]
    except:
        pass
    
    return Result


MovingMediaFiles()

#==========================================================================================#
# >>>>> ВЫХОД ИЗ ПРИЛОЖЕНИЯ <<<<< #
#==========================================================================================#

# # Выход из приложения.
# sys.exit(app.exec())